-----------------------------------------------------------------------------------------
Objectives
-----------------------------------------------------------------------------------------

This experiment is close to previous experiment E1. We will explore how the competitive ratio of "Greedy-2" algorithm with one machine applied on PPS job senquences changes for varying p: 

"Greedy-2" scheduling algorithm is simply aborting the current job if the coming job has as twice value as the current job on the machine has.

p is a parameter of PPS Scheme that controls how dense(length of interval between arrivals of consecutive jobs) a job sequence is. With a greater p, there is higher probability that a denser job sequence would be generated.  

We are interested in seeing how competitive ratio would change as p varies.
Specifically, the experiment would calculate the expectations and variances of competitive ratio of "Greedy-2" algorithm over job sequences produced by PPS Scheme with different p, and if necessary we will produce a graph describing the function of expectation and variance in terms of p.  

-----------------------------------------------------------------------------------------
Procedures
-----------------------------------------------------------------------------------------  

First, we generate PPS sequences for different p. 
To facilitate the procedure, we will use run1.sh, run2.sh and run3.sh to complete the generation. These scirpts can be obtained by modifying E4/run1.sh, E2/run2.sh and E4/run3.sh

Run3.sh is used to generate so-called input files that would be input for run1.sh, which then would produce job sequences for this experiment. 
Since we only want p to be varied, texts in most input files should be the same. In our case, only the second line would be changed to different chosen p. For this experiment, we want p = 0.05 * k, k = 1,2,...,19 
 
Example input file:
3
0.25
20
lambda y: y*y
100
Y

Example execution of jobs_generator.py (the execution would be automated by run1.sh):
Run ./jobs_generator.py --batch --redir PPS[k] --jl 400
    Choose PPS Scheme
    Enter p
    For lambda, enter 20
    For benevolent function, enter "lambda y: y * y" (without quotes), if this function is still set as default, dont input anything
    For the number of job sequences, enter 100

The result of generations would be in Experiments/E6-2/jobs

Create a configuration file called config under this directory. This file will be used to set up machine we will use.
Copy and paste the following lines into config:

1
2 2
1

If any changes occur to this experiment in future, a great approach to change the behavior of the experiment is to modify config.
Consult MMIS/ConfigFileFormat to understand how it works

Change directory to MMIS, run run2.sh to launch the simulation.
Run clip.py to collect the result in E6. Plotting the result in Canopy is a more intuitive way to understand the result, though we need to uncomment some codes of clip.py

---------------------------------------------------------------------------------------
Result
---------------------------------------------------------------------------------------

While variance of the competitive ratios are uniformly small, there is a apparently positive relation between expected competitive ratio and density of the job sequence.  With the data and plot below, we should be able to conclude that the density of a PPS job sequence affects the performance of Greedy-2 algorithm.

p               expected competitive ratio
0.05            1.06
0.1             1.07
0.15            1.08
0.2             1.09
0.25            1.09
0.3             1.10
0.35            1.10
0.4             1.10
0.45            1.10    
0.5             1.10
0.55            1.11
0.6             1.11
0.65            1.10
0.7             1.11
0.75            1.11
0.8             1.12
0.85            1.12
0.9             1.12
0.95            1.12

In fact, the number of repetition of this experiment could not promise the precision of the last digit. The importance of this experiment is the discovery of the ascending tendency of competitive ratio (Such intuitive tendency has not been found in the incorrect experiment E6), since a bug about randomness has misled us for a long time. With our focus being on other types of job sequences, we will leave the experiment this way. If one tries to obtain reliable and precise last digits, we suggest adjusting the number of job sequences to 10000 and re-evaluating the competitive ratio. 
