-----------------------------------------------------------------------------------------
Objectives
-----------------------------------------------------------------------------------------

The second experiment is to explore how the competitive ratio of "Greedy-2" algorithm with one machine applied on PUS job senquence varies by p: 

"Greedy-2" scheduling algorithm is simply aborting the current job if the coming job has as twice value as the current job on the machine has.

p is a parameter of PUS Scheme that controls how dense(length of interval between arrivals of consecutive jobs) a job sequence is. With a greater p, there is higher probability that a denser job sequence would be generated.  

We are interested in seeing how competitive ratio would change as p varies.
Specifically, the experiment would calculate the expectations and variances of competitive ratio of "Greedy-2" algorithm over job sequences produced under distribution of job sequences generated by different p, and produce graph describing the function of expectation and variance according to p.  

-----------------------------------------------------------------------------------------
Procedures
-----------------------------------------------------------------------------------------  

First, we generate PUS sequences for different p. 

For p = 0.05 * k, k = 1,2,...19
Run ./jobs_generate.py --batch --redir PUS[k] --jl 400
    Choose PUS Scheme
    Enter p
    For a, enter 5
    For b, enter 25
    For benevolent function, enter "lambda y: y * y" (without quotes), if this function is still set as default, dont input anything
    For the number of job sequences, enter 100

The result of generations would be in job_base, copy and paste all generations to Experiments/E1

Create a configuration file called config under this directory. This file will be used to set up machine we wanna use.
Copy and paste the following into config:

1
2 2
1

If any changes occur to this experiment in future, a great approach to change the behavior of the experiment is to modify config.
Consult ConfigFileFormat to understand how it works

Change directory to MMIS, use "job_base" mode and redirect the result to the desired result file

For every k, 
Run ./main.py --experiment Experiment/E1/config --jb Experiment/E1/jobs/PUS[k] --repeat 10 > Experiment/E1/result[k] 
(Using a bash file helps, these commands will take lots of time)
Store resulting files into Experiment/E1/result

Collect the result by writing a scripts, and draw corresponding curves

---------------------------------------------------------------------------------------
Result
---------------------------------------------------------------------------------------

